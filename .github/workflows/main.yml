# GitHub Action Workflow to Deploy Flask App to AWS ElasticBeanstalk

name: CI-CD-Pipeline-to-AWS-ElasticBeanstalk
env:
  EB_PACKAGE_S3_BUCKET_NAME: "attendance-sheet"
  EB_APPLICATION_NAME: "AttendanceSheet"
  EB_ENVIRONMENT_NAME: "AttendanceSheet-env"
  DEPLOY_PACKAGE_NAME: "attendance-sheet-app-${{ github.sha }}.zip"
  AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}

on:
  push:
    branches:
      - master

jobs:
  ci_pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Clone the Repository
        uses: actions/checkout@v1

      - name: Create ZIP Deployment Package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./  -x  *.git*

      - name: Configure AWS Credentils
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Copy Deployment Package to S3 Bucket
        run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME}}/

      - name: CI Pipeline Result
        run: echo "CI Pipeline has finished successfully"

  cd_pipeline:
    runs-on: ubuntu-latest
    needs: [ci_pipeline]

    steps:
      - name: Configure AWS Credentils
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.EB_PACKAGE_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "Ver-${{ github.sha }}" \
          --description "CommitSHA-${{ github.sha }}"
      - name: Deploy Using New Application Version
        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"

      - name: CD Pipeline Result
        run: echo "CD Pipeline has finished successfully"
